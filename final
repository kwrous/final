{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "f61f40b8",
   "metadata": {
    "_cell_guid": "6ceb62f5-bf89-4f5f-bea5-c621c3882fe7",
    "_uuid": "b43992de-0759-4d21-ae6f-0480b0517aff",
    "collapsed": false,
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 0.006806,
     "end_time": "2025-06-18T19:45:42.224094",
     "exception": false,
     "start_time": "2025-06-18T19:45:42.217288",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "\n",
    "本实验包含三种方法的实现和对比：\n",
    "1. 原版 NeRF\n",
    "2. NeRF 加速技术（TensoRF）\n",
    "3. 3D Gaussian Splatting\n",
    "\n",
    "## 目录\n",
    "1. [环境配置](#环境配置)\n",
    "2. [数据准备](#数据准备)\n",
    "3. [模型实现](#模型实现)\n",
    "4. [训练与评估](#训练与评估)\n",
    "5. [结果分析](#结果分析)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "43851237",
   "metadata": {
    "_cell_guid": "66ff20e9-0b00-4fc1-a7d4-4baa849c4fdb",
    "_uuid": "fd269f00-2b73-45a6-976b-c819683c510c",
    "collapsed": false,
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 0.00478,
     "end_time": "2025-06-18T19:45:42.234585",
     "exception": false,
     "start_time": "2025-06-18T19:45:42.229805",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "\n",
    "首先配置必要的环境和依赖。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "40a80e98",
   "metadata": {
    "_cell_guid": "72b3e1f5-1958-4c8d-b857-c6f3c07ec202",
    "_uuid": "67a4fb98-018d-4974-b2e0-39ce5ef26e7b",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2025-06-18T19:45:42.246023Z",
     "iopub.status.busy": "2025-06-18T19:45:42.245625Z",
     "iopub.status.idle": "2025-06-18T19:45:42.253080Z",
     "shell.execute_reply": "2025-06-18T19:45:42.252253Z"
    },
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 0.014957,
     "end_time": "2025-06-18T19:45:42.254487",
     "exception": false,
     "start_time": "2025-06-18T19:45:42.239530",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import os\n",
    "import shutil\n",
    "\n",
    "input_path = \"/kaggle/input\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "93baef0e",
   "metadata": {
    "_cell_guid": "c9628a13-9c73-4a71-9bc9-b41838e20c30",
    "_uuid": "5d4b2731-b303-43ef-8379-8c12213ea0db",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2025-06-18T19:45:42.267231Z",
     "iopub.status.busy": "2025-06-18T19:45:42.266626Z",
     "iopub.status.idle": "2025-06-18T19:45:47.234470Z",
     "shell.execute_reply": "2025-06-18T19:45:47.233423Z"
    },
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 4.976127,
     "end_time": "2025-06-18T19:45:47.236107",
     "exception": false,
     "start_time": "2025-06-18T19:45:42.259980",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'/kaggle/working/output'"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import os\n",
    "import shutil\n",
    "\n",
    "input_path = \"/kaggle/input/my-object\"\n",
    "output_path = \"/kaggle/working/output\"\n",
    "\n",
    "# 删除现有的输出目录\n",
    "if os.path.exists(output_path):\n",
    "    shutil.rmtree(output_path)\n",
    "\n",
    "# 复制目录\n",
    "shutil.copytree(input_path, output_path)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "a193691f",
   "metadata": {
    "_cell_guid": "a632f25f-7a6e-4abb-aacc-35b3ef8fc02e",
    "_uuid": "3c692cb3-9b20-4d02-be6f-3d7bec2ab23a",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2025-06-18T19:45:47.248060Z",
     "iopub.status.busy": "2025-06-18T19:45:47.247708Z",
     "iopub.status.idle": "2025-06-18T19:45:52.448131Z",
     "shell.execute_reply": "2025-06-18T19:45:52.446759Z"
    },
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 5.208454,
     "end_time": "2025-06-18T19:45:52.450035",
     "exception": false,
     "start_time": "2025-06-18T19:45:47.241581",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CUDA is available: False\n",
      "CUDA device count: 0\n"
     ]
    }
   ],
   "source": [
    "# 检查CUDA可用性\n",
    "import torch\n",
    "print(f\"CUDA is available: {torch.cuda.is_available()}\")\n",
    "print(f\"CUDA device count: {torch.cuda.device_count()}\")\n",
    "if torch.cuda.is_available():\n",
    "    print(f\"Current CUDA device: {torch.cuda.get_device_name(0)}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "00098bcb",
   "metadata": {
    "_cell_guid": "b7b5bee9-276d-4bc5-9720-1c574446d90e",
    "_uuid": "04ddd11a-372b-4740-b2bf-38d80dfebc4f",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2025-06-18T19:45:52.463458Z",
     "iopub.status.busy": "2025-06-18T19:45:52.463015Z",
     "iopub.status.idle": "2025-06-18T19:46:06.738528Z",
     "shell.execute_reply": "2025-06-18T19:46:06.737181Z"
    },
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 14.284771,
     "end_time": "2025-06-18T19:46:06.740746",
     "exception": false,
     "start_time": "2025-06-18T19:45:52.455975",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: opencv-python in /usr/local/lib/python3.11/dist-packages (4.11.0.86)\r\n",
      "Requirement already satisfied: imageio in /usr/local/lib/python3.11/dist-packages (2.37.0)\r\n",
      "Requirement already satisfied: scikit-image in /usr/local/lib/python3.11/dist-packages (0.25.2)\r\n",
      "Requirement already satisfied: tqdm in /usr/local/lib/python3.11/dist-packages (4.67.1)\r\n",
      "Requirement already satisfied: matplotlib in /usr/local/lib/python3.11/dist-packages (3.7.2)\r\n",
      "Requirement already satisfied: tensorboard in /usr/local/lib/python3.11/dist-packages (2.18.0)\r\n",
      "Requirement already satisfied: numpy>=1.21.2 in /usr/local/lib/python3.11/dist-packages (from opencv-python) (1.26.4)\r\n",
      "Requirement already satisfied: pillow>=8.3.2 in /usr/local/lib/python3.11/dist-packages (from imageio) (11.1.0)\r\n",
      "Requirement already satisfied: scipy>=1.11.4 in /usr/local/lib/python3.11/dist-packages (from scikit-image) (1.15.2)\r\n",
      "Requirement already satisfied: networkx>=3.0 in /usr/local/lib/python3.11/dist-packages (from scikit-image) (3.4.2)\r\n",
      "Requirement already satisfied: tifffile>=2022.8.12 in /usr/local/lib/python3.11/dist-packages (from scikit-image) (2025.3.30)\r\n",
      "Requirement already satisfied: packaging>=21 in /usr/local/lib/python3.11/dist-packages (from scikit-image) (25.0)\r\n",
      "Requirement already satisfied: lazy-loader>=0.4 in /usr/local/lib/python3.11/dist-packages (from scikit-image) (0.4)\r\n",
      "Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (1.3.1)\r\n",
      "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (0.12.1)\r\n",
      "Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (4.57.0)\r\n",
      "Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (1.4.8)\r\n",
      "Requirement already satisfied: pyparsing<3.1,>=2.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (3.0.9)\r\n",
      "Requirement already satisfied: python-dateutil>=2.7 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (2.9.0.post0)\r\n",
      "Requirement already satisfied: absl-py>=0.4 in /usr/local/lib/python3.11/dist-packages (from tensorboard) (1.4.0)\r\n",
      "Requirement already satisfied: grpcio>=1.48.2 in /usr/local/lib/python3.11/dist-packages (from tensorboard) (1.72.0rc1)\r\n",
      "Requirement already satisfied: markdown>=2.6.8 in /usr/local/lib/python3.11/dist-packages (from tensorboard) (3.7)\r\n",
      "Requirement already satisfied: protobuf!=4.24.0,>=3.19.6 in /usr/local/lib/python3.11/dist-packages (from tensorboard) (3.20.3)\r\n",
      "Requirement already satisfied: setuptools>=41.0.0 in /usr/local/lib/python3.11/dist-packages (from tensorboard) (75.2.0)\r\n",
      "Requirement already satisfied: six>1.9 in /usr/local/lib/python3.11/dist-packages (from tensorboard) (1.17.0)\r\n",
      "Requirement already satisfied: tensorboard-data-server<0.8.0,>=0.7.0 in /usr/local/lib/python3.11/dist-packages (from tensorboard) (0.7.2)\r\n",
      "Requirement already satisfied: werkzeug>=1.0.1 in /usr/local/lib/python3.11/dist-packages (from tensorboard) (3.1.3)\r\n",
      "Requirement already satisfied: mkl_fft in /usr/local/lib/python3.11/dist-packages (from numpy>=1.21.2->opencv-python) (1.3.8)\r\n",
      "Requirement already satisfied: mkl_random in /usr/local/lib/python3.11/dist-packages (from numpy>=1.21.2->opencv-python) (1.2.4)\r\n",
      "Requirement already satisfied: mkl_umath in /usr/local/lib/python3.11/dist-packages (from numpy>=1.21.2->opencv-python) (0.1.1)\r\n",
      "Requirement already satisfied: mkl in /usr/local/lib/python3.11/dist-packages (from numpy>=1.21.2->opencv-python) (2025.1.0)\r\n",
      "Requirement already satisfied: tbb4py in /usr/local/lib/python3.11/dist-packages (from numpy>=1.21.2->opencv-python) (2022.1.0)\r\n",
      "Requirement already satisfied: mkl-service in /usr/local/lib/python3.11/dist-packages (from numpy>=1.21.2->opencv-python) (2.4.1)\r\n",
      "Requirement already satisfied: MarkupSafe>=2.1.1 in /usr/local/lib/python3.11/dist-packages (from werkzeug>=1.0.1->tensorboard) (3.0.2)\r\n",
      "Requirement already satisfied: intel-openmp<2026,>=2024 in /usr/local/lib/python3.11/dist-packages (from mkl->numpy>=1.21.2->opencv-python) (2024.2.0)\r\n",
      "Requirement already satisfied: tbb==2022.* in /usr/local/lib/python3.11/dist-packages (from mkl->numpy>=1.21.2->opencv-python) (2022.1.0)\r\n",
      "Requirement already satisfied: tcmlib==1.* in /usr/local/lib/python3.11/dist-packages (from tbb==2022.*->mkl->numpy>=1.21.2->opencv-python) (1.3.0)\r\n",
      "Requirement already satisfied: intel-cmplr-lib-rt in /usr/local/lib/python3.11/dist-packages (from mkl_umath->numpy>=1.21.2->opencv-python) (2024.2.0)\r\n",
      "Requirement already satisfied: intel-cmplr-lib-ur==2024.2.0 in /usr/local/lib/python3.11/dist-packages (from intel-openmp<2026,>=2024->mkl->numpy>=1.21.2->opencv-python) (2024.2.0)\r\n",
      "Cloning into 'TensoRF'...\r\n",
      "remote: Enumerating objects: 117, done.\u001b[K\r\n",
      "remote: Counting objects: 100% (74/74), done.\u001b[K\r\n",
      "remote: Compressing objects: 100% (41/41), done.\u001b[K\r\n",
      "remote: Total 117 (delta 53), reused 33 (delta 33), pack-reused 43 (from 2)\u001b[K\r\n",
      "Receiving objects: 100% (117/117), 51.65 KiB | 6.46 MiB/s, done.\r\n",
      "Resolving deltas: 100% (66/66), done.\r\n",
      "Cloning into 'gaussian-splatting'...\r\n",
      "remote: Enumerating objects: 859, done.\u001b[K\r\n",
      "remote: Total 859 (delta 0), reused 0 (delta 0), pack-reused 859 (from 1)\u001b[K\r\n",
      "Receiving objects: 100% (859/859), 78.64 MiB | 18.56 MiB/s, done.\r\n",
      "Resolving deltas: 100% (492/492), done.\r\n",
      "Cloning into 'nerf'...\r\n",
      "remote: Enumerating objects: 169, done.\u001b[K\r\n",
      "remote: Counting objects: 100% (74/74), done.\u001b[K\r\n",
      "remote: Compressing objects: 100% (22/22), done.\u001b[K\r\n",
      "remote: Total 169 (delta 56), reused 52 (delta 52), pack-reused 95 (from 2)\u001b[K\r\n",
      "Receiving objects: 100% (169/169), 3.90 MiB | 26.09 MiB/s, done.\r\n",
      "Resolving deltas: 100% (87/87), done.\r\n"
     ]
    }
   ],
   "source": [
    "# 安装依赖包\n",
    "!pip install opencv-python imageio scikit-image tqdm matplotlib tensorboard\n",
    "\n",
    "# 克隆代码仓库\n",
    "!git clone https://github.com/apchenstu/TensoRF.git\n",
    "!git clone https://github.com/graphdeco-inria/gaussian-splatting.git\n",
    "!git clone https://github.com/bmild/nerf.git"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f19d1be5",
   "metadata": {
    "_cell_guid": "bbbc5f6f-aa96-448b-94d6-91fd6f58d918",
    "_uuid": "54e7bd57-19f6-4d99-937e-6fff791066bf",
    "collapsed": false,
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 0.006853,
     "end_time": "2025-06-18T19:46:06.755312",
     "exception": false,
     "start_time": "2025-06-18T19:46:06.748459",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "\n",
    "### 数据集结构\n",
    "```\n",
    "my_object/\n",
    "    images/           # 拍摄的多角度图片\n",
    "    sparse/0/         # COLMAP输出\n",
    "        cameras.bin\n",
    "        images.bin\n",
    "        points3D.bin\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "bc7588dc",
   "metadata": {
    "_cell_guid": "e0adbcb8-1480-48b3-96b7-629c2dbdc59f",
    "_uuid": "e772eb72-baec-4c98-ab3a-81328f0de9af",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2025-06-18T19:46:06.771069Z",
     "iopub.status.busy": "2025-06-18T19:46:06.770697Z",
     "iopub.status.idle": "2025-06-18T19:46:06.782857Z",
     "shell.execute_reply": "2025-06-18T19:46:06.782002Z"
    },
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 0.02223,
     "end_time": "2025-06-18T19:46:06.784578",
     "exception": false,
     "start_time": "2025-06-18T19:46:06.762348",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def create_transforms_json(data_dir: str):\n",
    "    \"\"\"\n",
    "    针对 my_object/ 结构，为训练集和测试集分别创建 transforms_train.json、transforms_test.json 文件，兼容TensoRF。\n",
    "    自动修正frames中file_path字段为相对images/的路径，避免路径拼接错误。\n",
    "    \"\"\"\n",
    "    import json\n",
    "    from pathlib import Path\n",
    "    data_path = Path(data_dir)\n",
    "    transforms_file = data_path / 'transforms.json'\n",
    "    if not transforms_file.exists():\n",
    "        raise FileNotFoundError(f\"找不到 {transforms_file}，请先运行 colmap2nerf.py 生成。\")\n",
    "    with open(transforms_file, 'r') as f:\n",
    "        transforms_data = json.load(f)\n",
    "    train_dir = data_path / 'train'\n",
    "    test_dir = data_path / 'test'\n",
    "    def get_stems(p):\n",
    "        return set(f.stem for f in p.glob('*') if f.is_file())\n",
    "    train_stems = get_stems(train_dir)\n",
    "    test_stems = get_stems(test_dir)\n",
    "    def filter_frames(stems):\n",
    "        # 修正file_path为 images/xxx.jpg 或 images/xxx.png\n",
    "        filtered = []\n",
    "        for frame in transforms_data['frames']:\n",
    "            stem = Path(frame['file_path']).stem\n",
    "            if stem in stems:\n",
    "                # 只保留 images/xxx.扩展名\n",
    "                ext = Path(frame['file_path']).suffix\n",
    "                frame['file_path'] = f\"images/{stem}{ext}\"\n",
    "                filtered.append(frame)\n",
    "        return filtered\n",
    "    train_frames = filter_frames(train_stems)\n",
    "    test_frames = filter_frames(test_stems)\n",
    "    # 写入TensoRF兼容的transforms_train.json、transforms_test.json\n",
    "    train_transforms = dict(transforms_data)\n",
    "    train_transforms['frames'] = train_frames\n",
    "    with open(data_path / 'transforms_train.json', 'w') as f:\n",
    "        json.dump(train_transforms, f, indent=2)\n",
    "    test_transforms = dict(transforms_data)\n",
    "    test_transforms['frames'] = test_frames\n",
    "    with open(data_path / 'transforms_test.json', 'w') as f:\n",
    "        json.dump(test_transforms, f, indent=2)\n",
    "    # 仍保留原有train/test目录下的transforms.json\n",
    "    with open(train_dir / 'transforms.json', 'w') as f:\n",
    "        json.dump(train_transforms, f, indent=2)\n",
    "    with open(test_dir / 'transforms.json', 'w') as f:\n",
    "        json.dump(test_transforms, f, indent=2)\n",
    "    print(f\"已为训练集({len(train_frames)})和测试集({len(test_frames)})生成 transforms_train.json / transforms_test.json 及各自目录下的transforms.json，图片路径已修正为 images/xxx.扩展名\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "349d4b1f",
   "metadata": {
    "_cell_guid": "1b06ab10-d32b-4eab-9da7-dea5dff0d844",
    "_uuid": "d51977eb-9673-4907-930d-8dd4b75e09a8",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2025-06-18T19:46:06.800370Z",
     "iopub.status.busy": "2025-06-18T19:46:06.800043Z",
     "iopub.status.idle": "2025-06-18T19:46:06.811972Z",
     "shell.execute_reply": "2025-06-18T19:46:06.810961Z"
    },
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 0.021476,
     "end_time": "2025-06-18T19:46:06.813637",
     "exception": false,
     "start_time": "2025-06-18T19:46:06.792161",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import os\n",
    "import json\n",
    "import numpy as np\n",
    "import random\n",
    "import shutil\n",
    "from pathlib import Path\n",
    "from PIL import Image\n",
    "\n",
    "def split_dataset(data_dir: str, train_ratio: float = 0.8, seed: int = 42):\n",
    "    \"\"\"数据集划分为训练集和测试集\"\"\"\n",
    "    random.seed(seed)\n",
    "    np.random.seed(seed)\n",
    "    \n",
    "    data_path = Path(data_dir)\n",
    "    images_path = data_path / 'images'\n",
    "    train_dir = data_path / 'train'\n",
    "    test_dir = data_path / 'test'\n",
    "    train_dir.mkdir(exist_ok=True)\n",
    "    test_dir.mkdir(exist_ok=True)\n",
    "    \n",
    "    # 修复图片glob写法，分别匹配三种扩展名\n",
    "    image_files = []\n",
    "    for ext in ['jpg', 'jpeg', 'png']:\n",
    "        image_files.extend(images_path.glob(f'*.{ext}'))\n",
    "    n_images = len(image_files)\n",
    "    n_train = int(n_images * train_ratio)\n",
    "    \n",
    "    random.shuffle(image_files)\n",
    "    train_files = image_files[:n_train]\n",
    "    test_files = image_files[n_train:]\n",
    "    \n",
    "    for f in train_files:\n",
    "        shutil.copy2(f, train_dir / f.name)\n",
    "    for f in test_files:\n",
    "        shutil.copy2(f, test_dir / f.name)\n",
    "    \n",
    "    print(f\"数据集划分完成：\")\n",
    "    print(f\"- 训练集：{len(train_files)}张图片\")\n",
    "    print(f\"- 测试集：{len(test_files)}张图片\")\n",
    "    \n",
    "    return train_dir, test_dir\n",
    "\n",
    "def prepare_dataset(data_dir: str):\n",
    "    \"\"\"完整的数据准备流程\"\"\"\n",
    "    # 1. 运行COLMAP数据处理（修正参数为--images --text --out）\n",
    "    images_dir = os.path.join(data_dir, 'images')\n",
    "    colmap_text_dir = os.path.join(data_dir, 'colmap_text')\n",
    "    transforms_out = os.path.join(data_dir, 'transforms.json')\n",
    "    !python TensoRF/dataLoader/colmap2nerf.py --images {images_dir} --text {colmap_text_dir} --out {transforms_out}\n",
    "    \n",
    "    # 2. 划分数据集\n",
    "    train_dir, test_dir = split_dataset(data_dir)\n",
    "    \n",
    "    # 3. 创建transforms文件\n",
    "    create_transforms_json(data_dir)\n",
    "    \n",
    "    print(\"数据准备完成！\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "d350cd37",
   "metadata": {
    "_cell_guid": "bdb654de-1435-4d04-bebb-c5641155c56b",
    "_uuid": "bade8857-c502-46b2-9875-53e57d7c4725",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2025-06-18T19:46:06.829020Z",
     "iopub.status.busy": "2025-06-18T19:46:06.828695Z",
     "iopub.status.idle": "2025-06-18T19:46:06.835743Z",
     "shell.execute_reply": "2025-06-18T19:46:06.834686Z"
    },
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 0.016539,
     "end_time": "2025-06-18T19:46:06.837286",
     "exception": false,
     "start_time": "2025-06-18T19:46:06.820747",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def visualize_camera_positions(transforms_json: str):\n",
    "    \"\"\"可视化相机位置分布\"\"\"\n",
    "    import matplotlib.pyplot as plt\n",
    "    from mpl_toolkits.mplot3d import Axes3D\n",
    "    \n",
    "    with open(transforms_json, 'r') as f:\n",
    "        data = json.load(f)\n",
    "    \n",
    "    positions = []\n",
    "    for frame in data['frames']:\n",
    "        transform = np.array(frame['transform_matrix'])\n",
    "        position = transform[:3, 3]\n",
    "        positions.append(position)\n",
    "    \n",
    "    positions = np.array(positions)\n",
    "    \n",
    "    fig = plt.figure(figsize=(10, 10))\n",
    "    ax = fig.add_subplot(111, projection='3d')\n",
    "    ax.scatter(positions[:, 0], positions[:, 1], positions[:, 2])\n",
    "    ax.set_xlabel('X')\n",
    "    ax.set_ylabel('Y')\n",
    "    ax.set_zlabel('Z')\n",
    "    ax.set_title('Camera Positions')\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0ce92b9d",
   "metadata": {
    "_cell_guid": "0d32a8e9-2bea-488d-80d0-f88f6dd417b8",
    "_uuid": "4acd3f63-3e5f-432f-a3d4-46009e58b436",
    "collapsed": false,
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 0.006598,
     "end_time": "2025-06-18T19:46:06.851383",
     "exception": false,
     "start_time": "2025-06-18T19:46:06.844785",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "\n",
    "包含三种模型的训练和渲染实现。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "78d4f649",
   "metadata": {
    "_cell_guid": "c95efc01-edf5-479c-84e5-213c03a5ab8a",
    "_uuid": "7f66143a-f835-4535-b470-ca06d13a4cc9",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2025-06-18T19:46:06.866408Z",
     "iopub.status.busy": "2025-06-18T19:46:06.866071Z",
     "iopub.status.idle": "2025-06-18T19:46:06.878148Z",
     "shell.execute_reply": "2025-06-18T19:46:06.877415Z"
    },
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 0.021334,
     "end_time": "2025-06-18T19:46:06.879535",
     "exception": false,
     "start_time": "2025-06-18T19:46:06.858201",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# TensoRF配置\n",
    "def create_tensorf_config(data_dir, exp_name):\n",
    "    \"\"\"创建TensoRF训练配置，并将配置文件写入TensoRF目录下\"\"\"\n",
    "    config = {\n",
    "        'dataset_name': 'own_data',\n",
    "        'datadir': data_dir,\n",
    "        'expname': exp_name,\n",
    "        'basedir': './log',\n",
    "        'n_iters': 30000,\n",
    "        'batch_size': 4096,\n",
    "        'N_voxel_init': 2097156,  # 128**3\n",
    "        'N_voxel_final': 27000000,  # 300**3\n",
    "        'upsamp_list': [2000, 3000, 4000, 5500, 7000],\n",
    "        'update_AlphaMask_list': [2000, 4000],\n",
    "        'model_name': 'TensorVMSplit',\n",
    "        'n_lamb_sigma': [16, 16, 16],\n",
    "        'n_lamb_sh': [48, 48, 48]\n",
    "    }\n",
    "    config_path = os.path.join('TensoRF', 'tensorf_config.txt')\n",
    "    with open(config_path, 'w') as f:\n",
    "        for key, value in config.items():\n",
    "            f.write(f\"{key} = {value}\\n\")\n",
    "    return config_path\n",
    "\n",
    "def train_models(data_dir: str):\n",
    "    \"\"\"训练三个模型\"\"\"\n",
    "    # 1. TensoRF\n",
    "    config_path = create_tensorf_config(data_dir, 'experiment_1')\n",
    "    !cd TensoRF && python train.py --config tensorf_config.txt\n",
    "    \n",
    "    # 2. Original NeRF（只传递NeRF需要的参数）\n",
    "    !cd nerf && python run_nerf.py --config configs/default.txt --datadir {data_dir}\n",
    "    \n",
    "    # 3. 3D Gaussian Splatting\n",
    "    !cd gaussian-splatting && python train.py -s {data_dir}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1efe0ea5",
   "metadata": {
    "_cell_guid": "35f3970f-0f3a-40f3-a75c-2bb92fe1b2ed",
    "_uuid": "56450cd4-7379-4d2b-ac1f-c7439d0ef18e",
    "collapsed": false,
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 0.006614,
     "end_time": "2025-06-18T19:46:06.893155",
     "exception": false,
     "start_time": "2025-06-18T19:46:06.886541",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "\n",
    "使用Tensorboard监控训练过程，包括：\n",
    "- 训练集和测试集上的loss曲线\n",
    "- PSNR指标变化\n",
    "- SSIM指标变化"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "18ec537b",
   "metadata": {
    "_cell_guid": "d541ef22-a9e5-4d57-b671-e968b2e102a4",
    "_uuid": "47b7fc43-600b-45b3-9442-0c8a716ee56c",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2025-06-18T19:46:06.909885Z",
     "iopub.status.busy": "2025-06-18T19:46:06.908523Z",
     "iopub.status.idle": "2025-06-18T19:46:27.652456Z",
     "shell.execute_reply": "2025-06-18T19:46:27.651401Z"
    },
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 20.753895,
     "end_time": "2025-06-18T19:46:27.654297",
     "exception": false,
     "start_time": "2025-06-18T19:46:06.900402",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-06-18 19:46:09.713287: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1750275969.966603      13 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1750275970.060775      13 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "from torch.utils.tensorboard import SummaryWriter\n",
    "import datetime\n",
    "\n",
    "def setup_tensorboard(experiment_name):\n",
    "    \"\"\"设置Tensorboard\"\"\"\n",
    "    current_time = datetime.datetime.now().strftime('%Y%m%d-%H%M%S')\n",
    "    log_dir = f'runs/{experiment_name}_{current_time}'\n",
    "    return SummaryWriter(log_dir)\n",
    "\n",
    "def log_metrics(writer, metrics, step):\n",
    "    \"\"\"记录训练指标\"\"\"\n",
    "    for key, value in metrics.items():\n",
    "        writer.add_scalar(key, value, step)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "ebd56349",
   "metadata": {
    "_cell_guid": "c338c8fa-9ccb-4852-b8ae-6f1aea5ecdc1",
    "_uuid": "aceeb7ea-4f65-438a-afa9-09438c7b4b8c",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2025-06-18T19:46:27.670885Z",
     "iopub.status.busy": "2025-06-18T19:46:27.670252Z",
     "iopub.status.idle": "2025-06-18T19:46:27.678467Z",
     "shell.execute_reply": "2025-06-18T19:46:27.677314Z"
    },
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 0.018295,
     "end_time": "2025-06-18T19:46:27.679968",
     "exception": false,
     "start_time": "2025-06-18T19:46:27.661673",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# 创建环绕相机轨迹\n",
    "def create_circular_trajectory(n_frames=120, radius=4.0, height=0.0):\n",
    "    \"\"\"创建环绕物体的圆形相机轨迹\"\"\"\n",
    "    trajectory = []\n",
    "    for i in range(n_frames):\n",
    "        angle = (i / n_frames) * 2 * np.pi\n",
    "        x = radius * np.cos(angle)\n",
    "        z = radius * np.sin(angle)\n",
    "        y = height\n",
    "        \n",
    "        look_at = np.array([0, 0, 0])\n",
    "        pos = np.array([x, y, z])\n",
    "        up = np.array([0, 1, 0])\n",
    "        \n",
    "        forward = look_at - pos\n",
    "        forward = forward / np.linalg.norm(forward)\n",
    "        right = np.cross(forward, up)\n",
    "        right = right / np.linalg.norm(right)\n",
    "        up = np.cross(right, forward)\n",
    "        \n",
    "        c2w = np.eye(4)\n",
    "        c2w[:3, :3] = np.stack([right, up, -forward], axis=1)\n",
    "        c2w[:3, 3] = pos\n",
    "        \n",
    "        trajectory.append(c2w.tolist())\n",
    "    \n",
    "    return trajectory"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "e3f9601e",
   "metadata": {
    "_cell_guid": "67927cdb-c27a-481c-b8b8-bfc8d2471b03",
    "_uuid": "a694b2e6-d187-433b-a5a3-50762bd66202",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2025-06-18T19:46:27.696355Z",
     "iopub.status.busy": "2025-06-18T19:46:27.695534Z",
     "iopub.status.idle": "2025-06-18T19:46:27.702938Z",
     "shell.execute_reply": "2025-06-18T19:46:27.701792Z"
    },
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 0.017307,
     "end_time": "2025-06-18T19:46:27.704627",
     "exception": false,
     "start_time": "2025-06-18T19:46:27.687320",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from dataclasses import dataclass\n",
    "\n",
    "@dataclass\n",
    "class ModelPerformance:\n",
    "    \"\"\"记录模型性能指标\"\"\"\n",
    "    name: str\n",
    "    training_time: float\n",
    "    inference_time: float\n",
    "    psnr: float\n",
    "    ssim: float\n",
    "    memory_usage: float\n",
    "    parameters: int\n",
    "\n",
    "def evaluate_models(data_dir: str):\n",
    "    \"\"\"评估三个模型的性能\"\"\"\n",
    "    # 创建环绕轨迹\n",
    "    trajectory = create_circular_trajectory()\n",
    "    \n",
    "    # 评估每个模型\n",
    "    models = ['nerf', 'tensorf', 'gaussian']\n",
    "    results = {}\n",
    "    \n",
    "    for model in models:\n",
    "        if model == 'tensorf':\n",
    "            metrics = evaluate_on_test_set('tensorf', 'tensorf_config.txt', 'TensoRF/logs/model.pth')\n",
    "        elif model == 'nerf':\n",
    "            metrics = evaluate_on_test_set('nerf', 'nerf/configs/default.txt', 'nerf/logs/model.pth')\n",
    "        else:\n",
    "            metrics = evaluate_on_test_set('gaussian', ckpt_path='gaussian_model.ply')\n",
    "        \n",
    "        results[model] = metrics\n",
    "    \n",
    "    return results"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f7a61b65",
   "metadata": {
    "_cell_guid": "11c79541-77bb-4ac5-9494-92be4045677e",
    "_uuid": "081e5240-0210-4894-b91c-701a7ff0bd02",
    "collapsed": false,
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 0.006866,
     "end_time": "2025-06-18T19:46:27.718905",
     "exception": false,
     "start_time": "2025-06-18T19:46:27.712039",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "\n",
    "比较三种方法的:\n",
    "1. 训练时间和效率\n",
    "2. 渲染质量（PSNR/SSIM）\n",
    "3. 资源消耗"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "f8e95f2d",
   "metadata": {
    "_cell_guid": "1b90f824-5930-429a-a688-5febf590e4dd",
    "_uuid": "fe414833-609b-4618-840a-3567b6f0484a",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2025-06-18T19:46:27.734413Z",
     "iopub.status.busy": "2025-06-18T19:46:27.734039Z",
     "iopub.status.idle": "2025-06-18T19:46:27.740509Z",
     "shell.execute_reply": "2025-06-18T19:46:27.739499Z"
    },
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 0.016092,
     "end_time": "2025-06-18T19:46:27.742154",
     "exception": false,
     "start_time": "2025-06-18T19:46:27.726062",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def visualize_results(results):\n",
    "    \"\"\"可视化对比结果\"\"\"\n",
    "    import matplotlib.pyplot as plt\n",
    "    \n",
    "    metrics = ['psnr', 'ssim', 'training_time', 'inference_time']\n",
    "    fig, axes = plt.subplots(2, 2, figsize=(15, 10))\n",
    "    fig.suptitle('Model Performance Comparison')\n",
    "    \n",
    "    for (metric, ax) in zip(metrics, axes.flat):\n",
    "        values = [results[model][metric] for model in results]\n",
    "        ax.bar(['NeRF', 'TensoRF', 'Gaussian'], values)\n",
    "        ax.set_title(metric.upper())\n",
    "    \n",
    "    plt.tight_layout()\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b2341787",
   "metadata": {
    "_cell_guid": "145f749c-f846-49f2-90ce-c0167560a76c",
    "_uuid": "1d308e7f-db4e-4755-868b-b15664bb8b4d",
    "collapsed": false,
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 0.007711,
     "end_time": "2025-06-18T19:46:27.757344",
     "exception": false,
     "start_time": "2025-06-18T19:46:27.749633",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "\n",
    "```python\n",
    "# 1. 准备数据\n",
    "data_dir = 'data/my_object'\n",
    "prepare_dataset(data_dir)\n",
    "\n",
    "# 2. 训练模型\n",
    "train_models(data_dir)\n",
    "\n",
    "# 3. 评估结果\n",
    "results = evaluate_models(data_dir)\n",
    "visualize_results(results)\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "a6f527ff",
   "metadata": {
    "_cell_guid": "e5572d19-cc81-4b16-85b1-8ae6a21a582d",
    "_uuid": "a5deb4e5-298f-441c-bca4-7127a0835163",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2025-06-18T19:46:27.773401Z",
     "iopub.status.busy": "2025-06-18T19:46:27.773057Z",
     "iopub.status.idle": "2025-06-18T19:46:27.780342Z",
     "shell.execute_reply": "2025-06-18T19:46:27.779400Z"
    },
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 0.017459,
     "end_time": "2025-06-18T19:46:27.781888",
     "exception": false,
     "start_time": "2025-06-18T19:46:27.764429",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "已复制TensoRF/configs/your_own_data.txt 到 nerf/configs/default.txt\n"
     ]
    }
   ],
   "source": [
    "# 复制TensoRF的配置模板为NeRF默认配置，解决缺省配置文件报错\n",
    "import shutil, os\n",
    "nerf_config_dir = os.path.join('nerf', 'configs')\n",
    "os.makedirs(nerf_config_dir, exist_ok=True)\n",
    "shutil.copy(os.path.join('TensoRF', 'configs', 'your_own_data.txt'), os.path.join(nerf_config_dir, 'default.txt'))\n",
    "print('已复制TensoRF/configs/your_own_data.txt 到 nerf/configs/default.txt')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "0588a0e1",
   "metadata": {
    "_cell_guid": "541e58b3-486b-4265-8c8e-982d16ea5e57",
    "_uuid": "16fc379a-3ab6-4b51-865a-0f3bb5873c14",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2025-06-18T19:46:27.797956Z",
     "iopub.status.busy": "2025-06-18T19:46:27.797626Z",
     "iopub.status.idle": "2025-06-18T19:46:41.177683Z",
     "shell.execute_reply": "2025-06-18T19:46:41.176465Z"
    },
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 13.389696,
     "end_time": "2025-06-18T19:46:41.179318",
     "exception": false,
     "start_time": "2025-06-18T19:46:27.789622",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "outputting to /kaggle/working/output/my_object/transforms.json...\r\n",
      "camera:\r\n",
      "\tres=(4032.0, 3024.0)\r\n",
      "\tcenter=(2016.0, 1512.0)\r\n",
      "\tfocal=(2890.264600930469, 2890.264600930469)\r\n",
      "\tfov=(69.79262539154004, 55.23132537766537)\r\n",
      "\tk=(0.07483970558625651, 0) p=(0, 0) \r\n",
      "./output/my_object/images/16.jpg sharpness= 21.02232539157227\r\n",
      "./output/my_object/images/17.jpg sharpness= 124.45787691522006\r\n",
      "./output/my_object/images/29.jpg sharpness= 11.30380424207705\r\n",
      "./output/my_object/images/30.jpg sharpness= 18.9485096723625\r\n",
      "./output/my_object/images/31.jpg sharpness= 15.32193158891093\r\n",
      "./output/my_object/images/32.jpg sharpness= 133.86177584887517\r\n",
      "./output/my_object/images/33.jpg sharpness= 126.11009099757499\r\n",
      "./output/my_object/images/34.jpg sharpness= 130.05493116861018\r\n",
      "./output/my_object/images/35.jpg sharpness= 124.59634169054175\r\n",
      "./output/my_object/images/58.jpg sharpness= 14.191137126961388\r\n",
      "./output/my_object/images/59.jpg sharpness= 14.223960662686292\r\n",
      "./output/my_object/images/60.jpg sharpness= 12.10553428759155\r\n",
      "./output/my_object/images/61.jpg sharpness= 13.067619327040733\r\n",
      "./output/my_object/images/62.jpg sharpness= 11.900019239167957\r\n",
      "./output/my_object/images/64.jpg sharpness= 19.456999996736812\r\n",
      "./output/my_object/images/65.jpg sharpness= 11.645156510237173\r\n",
      "./output/my_object/images/66.jpg sharpness= 10.369276836125715\r\n",
      "./output/my_object/images/67.jpg sharpness= 9.85222953560359\r\n",
      "./output/my_object/images/68.jpg sharpness= 10.722381884828946\r\n",
      "./output/my_object/images/69.jpg sharpness= 10.448672769184094\r\n",
      "./output/my_object/images/70.jpg sharpness= 10.708487479405228\r\n",
      "./output/my_object/images/71.jpg sharpness= 10.391735492770511\r\n",
      "./output/my_object/images/72.jpg sharpness= 10.537796735151971\r\n",
      "./output/my_object/images/73.jpg sharpness= 15.863189512475552\r\n",
      "./output/my_object/images/74.jpg sharpness= 10.641706028419048\r\n",
      "./output/my_object/images/75.jpg sharpness= 10.829092949018412\r\n",
      "./output/my_object/images/79.jpg sharpness= 58.61249783449661\r\n",
      "./output/my_object/images/80.jpg sharpness= 59.52523167831938\r\n",
      "up vector was [-0.92168654 -0.37123938  0.11258442]\r\n",
      "computing center of attention...\r\n",
      "[-5.77574704 -1.90033476  0.35218526]\r\n",
      "avg camera distance from origin 7.146537094697909\r\n",
      "28 frames\r\n",
      "writing /kaggle/working/output/my_object/transforms.json\r\n",
      "数据集划分完成：\n",
      "- 训练集：64张图片\n",
      "- 测试集：16张图片\n",
      "已为训练集(19)和测试集(9)生成 transforms_train.json / transforms_test.json 及各自目录下的transforms.json，图片路径已修正为 images/xxx.扩展名\n",
      "数据准备完成！\n"
     ]
    }
   ],
   "source": [
    "# 1. 准备数据\n",
    "data_dir = '/kaggle/working/output/my_object'\n",
    "prepare_dataset(data_dir)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "dfd7fbb7",
   "metadata": {
    "_cell_guid": "22cca51b-acd6-4d69-8a07-f7a26eeb62f2",
    "_uuid": "bb3b0515-976f-4ecd-afb6-ab7352e40e41",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2025-06-18T19:46:41.198031Z",
     "iopub.status.busy": "2025-06-18T19:46:41.197663Z",
     "iopub.status.idle": "2025-06-18T19:46:45.427100Z",
     "shell.execute_reply": "2025-06-18T19:46:45.425655Z"
    },
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 4.240901,
     "end_time": "2025-06-18T19:46:45.429049",
     "exception": false,
     "start_time": "2025-06-18T19:46:41.188148",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting configargparse\r\n",
      "  Downloading configargparse-1.7.1-py3-none-any.whl.metadata (24 kB)\r\n",
      "Collecting plyfile\r\n",
      "  Downloading plyfile-1.1.2-py3-none-any.whl.metadata (43 kB)\r\n",
      "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m43.3/43.3 kB\u001b[0m \u001b[31m2.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25hRequirement already satisfied: numpy>=1.21 in /usr/local/lib/python3.11/dist-packages (from plyfile) (1.26.4)\r\n",
      "Requirement already satisfied: mkl_fft in /usr/local/lib/python3.11/dist-packages (from numpy>=1.21->plyfile) (1.3.8)\r\n",
      "Requirement already satisfied: mkl_random in /usr/local/lib/python3.11/dist-packages (from numpy>=1.21->plyfile) (1.2.4)\r\n",
      "Requirement already satisfied: mkl_umath in /usr/local/lib/python3.11/dist-packages (from numpy>=1.21->plyfile) (0.1.1)\r\n",
      "Requirement already satisfied: mkl in /usr/local/lib/python3.11/dist-packages (from numpy>=1.21->plyfile) (2025.1.0)\r\n",
      "Requirement already satisfied: tbb4py in /usr/local/lib/python3.11/dist-packages (from numpy>=1.21->plyfile) (2022.1.0)\r\n",
      "Requirement already satisfied: mkl-service in /usr/local/lib/python3.11/dist-packages (from numpy>=1.21->plyfile) (2.4.1)\r\n",
      "Requirement already satisfied: intel-openmp<2026,>=2024 in /usr/local/lib/python3.11/dist-packages (from mkl->numpy>=1.21->plyfile) (2024.2.0)\r\n",
      "Requirement already satisfied: tbb==2022.* in /usr/local/lib/python3.11/dist-packages (from mkl->numpy>=1.21->plyfile) (2022.1.0)\r\n",
      "Requirement already satisfied: tcmlib==1.* in /usr/local/lib/python3.11/dist-packages (from tbb==2022.*->mkl->numpy>=1.21->plyfile) (1.3.0)\r\n",
      "Requirement already satisfied: intel-cmplr-lib-rt in /usr/local/lib/python3.11/dist-packages (from mkl_umath->numpy>=1.21->plyfile) (2024.2.0)\r\n",
      "Requirement already satisfied: intel-cmplr-lib-ur==2024.2.0 in /usr/local/lib/python3.11/dist-packages (from intel-openmp<2026,>=2024->mkl->numpy>=1.21->plyfile) (2024.2.0)\r\n",
      "Downloading configargparse-1.7.1-py3-none-any.whl (25 kB)\r\n",
      "Downloading plyfile-1.1.2-py3-none-any.whl (36 kB)\r\n",
      "Installing collected packages: configargparse, plyfile\r\n",
      "Successfully installed configargparse-1.7.1 plyfile-1.1.2\r\n",
      "未找到setup.py或pyproject.toml，请检查子模块是否完整。\n",
      "未找到setup.py或pyproject.toml，请检查simple-knn子模块是否完整。\n"
     ]
    }
   ],
   "source": [
    "# 安装TensoRF/NeRF依赖\n",
    "!pip install configargparse plyfile\n",
    "\n",
    "# 编译并安装Gaussian Splatting的diff-gaussian-rasterization子模块\n",
    "import os\n",
    "os.chdir('gaussian-splatting/submodules/diff-gaussian-rasterization')\n",
    "if os.path.exists('setup.py') or os.path.exists('pyproject.toml'):\n",
    "    # 使用pip安装当前目录\n",
    "    !pip install .\n",
    "else:\n",
    "    print(\"未找到setup.py或pyproject.toml，请检查子模块是否完整。\")\n",
    "os.chdir('../simple-knn')\n",
    "if os.path.exists('setup.py') or os.path.exists('pyproject.toml'):\n",
    "    # 使用pip安装当前目录\n",
    "    !pip install .\n",
    "else:\n",
    "    print(\"未找到setup.py或pyproject.toml，请检查simple-knn子模块是否完整。\")\n",
    "os.chdir('../../../')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "ac71cf45",
   "metadata": {
    "_cell_guid": "9acce4f3-0624-4ab5-8414-f42a6a11fca4",
    "_uuid": "ab802d49-5098-43f2-a51a-87dbe24c897d",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2025-06-18T19:46:45.449368Z",
     "iopub.status.busy": "2025-06-18T19:46:45.448437Z",
     "iopub.status.idle": "2025-06-18T19:46:45.466196Z",
     "shell.execute_reply": "2025-06-18T19:46:45.465161Z"
    },
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 0.029262,
     "end_time": "2025-06-18T19:46:45.467678",
     "exception": false,
     "start_time": "2025-06-18T19:46:45.438416",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/working/output/my_object/transforms_train.json 无需修正。\n",
      "/kaggle/working/output/my_object/transforms_test.json 无需修正。\n"
     ]
    }
   ],
   "source": [
    "import os\n",
    "import json\n",
    "from glob import glob\n",
    "\n",
    "def fix_transforms_json_image_paths(transforms_path, images_dir):\n",
    "    with open(transforms_path, 'r', encoding='utf-8') as f:\n",
    "        data = json.load(f)\n",
    "    changed = False\n",
    "    for frame in data.get('frames', []):\n",
    "        file_path = frame['file_path']\n",
    "        # 只保留文件名部分\n",
    "        filename = os.path.basename(file_path)\n",
    "        # 去除多余扩展名（如16.jpg.png）\n",
    "        base, ext = os.path.splitext(filename)\n",
    "        # 检查实际存在的文件\n",
    "        candidates = glob(os.path.join(images_dir, base + '.*'))\n",
    "        if candidates:\n",
    "            # 取第一个实际存在的文件\n",
    "            real_file = os.path.basename(candidates[0])\n",
    "            new_path = f'images/{real_file}'\n",
    "            if frame['file_path'] != new_path:\n",
    "                print(f\"修正: {frame['file_path']} -> {new_path}\")\n",
    "                frame['file_path'] = new_path\n",
    "                changed = True\n",
    "        else:\n",
    "            print(f\"警告: 未找到图片 {filename} 在 {images_dir}\")\n",
    "    if changed:\n",
    "        with open(transforms_path, 'w', encoding='utf-8') as f:\n",
    "            json.dump(data, f, indent=2)\n",
    "        print(f\"已修正 {transforms_path} 中的图片路径。\")\n",
    "    else:\n",
    "        print(f\"{transforms_path} 无需修正。\")\n",
    "\n",
    "# 用法示例\n",
    "fix_transforms_json_image_paths('/kaggle/working/output/my_object/transforms_train.json', '/kaggle/working/output/my_object/images')\n",
    "fix_transforms_json_image_paths('/kaggle/working/output/my_object/transforms_test.json', '/kaggle/working/output/my_object/images')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "5470152b",
   "metadata": {
    "_cell_guid": "654ab0e1-f203-4087-a491-609f941eeb33",
    "_uuid": "d186dfe2-02bc-4b0b-8c36-2f841ebe84b3",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2025-06-18T19:46:45.486682Z",
     "iopub.status.busy": "2025-06-18T19:46:45.486333Z",
     "iopub.status.idle": "2025-06-18T19:47:16.738394Z",
     "shell.execute_reply": "2025-06-18T19:47:16.736811Z"
    },
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 31.264428,
     "end_time": "2025-06-18T19:47:16.741175",
     "exception": false,
     "start_time": "2025-06-18T19:46:45.476747",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2025-06-18 19:46:58.958198: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\r\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\r\n",
      "E0000 00:00:1750276018.978746      89 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\r\n",
      "E0000 00:00:1750276018.985750      89 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\r\n",
      "Namespace(config='tensorf_config.txt', expname='experiment_1', basedir='./log', add_timestamp=0, datadir='/kaggle/working/output/my_object', progress_refresh_rate=10, with_depth=False, downsample_train=1.0, downsample_test=1.0, model_name='TensorVMSplit', batch_size=4096, n_iters=30000, dataset_name='own_data', lr_init=0.02, lr_basis=0.001, lr_decay_iters=-1, lr_decay_target_ratio=0.1, lr_upsample_reset=1, L1_weight_inital=0.0, L1_weight_rest=0, Ortho_weight=0.0, TV_weight_density=0.0, TV_weight_app=0.0, n_lamb_sigma=[16, 16, 16], n_lamb_sh=[48, 48, 48], data_dim_color=27, rm_weight_mask_thre=0.0001, alpha_mask_thre=0.0001, distance_scale=25, density_shift=-10, shadingMode='MLP_PE', pos_pe=6, view_pe=6, fea_pe=6, featureC=128, ckpt=None, render_only=0, render_test=0, render_train=0, render_path=0, export_mesh=0, lindisp=False, perturb=1.0, accumulate_decay=0.998, fea2denseAct='softplus', ndc_ray=0, nSamples=1000000.0, step_ratio=0.5, white_bkgd=False, N_voxel_init=2097156, N_voxel_final=27000000, upsamp_list=[2000, 3000, 4000, 5500, 7000], update_AlphaMask_list=[2000, 4000], idx_view=0, N_vis=5, vis_every=10000)\r\n",
      "Loading data train (19):   0%|                           | 0/19 [00:00<?, ?it/s]\r\n",
      "Traceback (most recent call last):\r\n",
      "  File \"/kaggle/working/TensoRF/train.py\", line 317, in <module>\r\n",
      "    reconstruction(args)\r\n",
      "  File \"/kaggle/working/TensoRF/train.py\", line 93, in reconstruction\r\n",
      "    train_dataset = dataset(args.datadir, split='train', downsample=args.downsample_train, is_stack=False)\r\n",
      "                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n",
      "  File \"/kaggle/working/TensoRF/dataLoader/your_own_data.py\", line 25, in __init__\r\n",
      "    self.read_meta()\r\n",
      "  File \"/kaggle/working/TensoRF/dataLoader/your_own_data.py\", line 75, in read_meta\r\n",
      "    img = Image.open(image_path)\r\n",
      "          ^^^^^^^^^^^^^^^^^^^^^^\r\n",
      "  File \"/usr/local/lib/python3.11/dist-packages/PIL/Image.py\", line 3465, in open\r\n",
      "    fp = builtins.open(filename, \"rb\")\r\n",
      "         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n",
      "FileNotFoundError: [Errno 2] No such file or directory: '/kaggle/working/output/my_object/images/16.jpg.png'\r\n",
      "2025-06-18 19:47:07.742393: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\r\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\r\n",
      "E0000 00:00:1750276027.768026     103 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\r\n",
      "E0000 00:00:1750276027.777046     103 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\r\n",
      "usage: run_nerf.py [-h] [--config CONFIG] [--expname EXPNAME] [--basedir BASEDIR]\r\n",
      "                   [--datadir DATADIR] [--netdepth NETDEPTH] [--netwidth NETWIDTH]\r\n",
      "                   [--netdepth_fine NETDEPTH_FINE] [--netwidth_fine NETWIDTH_FINE]\r\n",
      "                   [--N_rand N_RAND] [--lrate LRATE] [--lrate_decay LRATE_DECAY] [--chunk CHUNK]\r\n",
      "                   [--netchunk NETCHUNK] [--no_batching] [--no_reload] [--ft_path FT_PATH]\r\n",
      "                   [--random_seed RANDOM_SEED] [--precrop_iters PRECROP_ITERS]\r\n",
      "                   [--precrop_frac PRECROP_FRAC] [--N_samples N_SAMPLES]\r\n",
      "                   [--N_importance N_IMPORTANCE] [--perturb PERTURB] [--use_viewdirs]\r\n",
      "                   [--i_embed I_EMBED] [--multires MULTIRES] [--multires_views MULTIRES_VIEWS]\r\n",
      "                   [--raw_noise_std RAW_NOISE_STD] [--render_only] [--render_test]\r\n",
      "                   [--render_factor RENDER_FACTOR] [--dataset_type DATASET_TYPE]\r\n",
      "                   [--testskip TESTSKIP] [--shape SHAPE] [--white_bkgd] [--half_res]\r\n",
      "                   [--factor FACTOR] [--no_ndc] [--lindisp] [--spherify] [--llffhold LLFFHOLD]\r\n",
      "                   [--i_print I_PRINT] [--i_img I_IMG] [--i_weights I_WEIGHTS]\r\n",
      "                   [--i_testset I_TESTSET] [--i_video I_VIDEO]\r\n",
      "run_nerf.py: error: unrecognized arguments: --dataset_name=own_data --n_iters=30000 --batch_size=4096 --N_voxel_init=2097156 --N_voxel_final=27000000 --upsamp_list=2000 --upsamp_list=3000 --upsamp_list=4000 --upsamp_list=5500 --upsamp_list=7000 --update_AlphaMask_list=2000 --update_AlphaMask_list=4000 --N_vis=5 --vis_every=10000 --n_lamb_sigma=16 --n_lamb_sigma=16 --n_lamb_sigma=16 --n_lamb_sh=48 --n_lamb_sh=48 --n_lamb_sh=48 --model_name=TensorVMSplit --shadingMode=MLP_Fea --fea2denseAct=softplus --view_pe=2 --fea_pe=2 --TV_weight_density=0.1 --TV_weight_app=0.01 --rm_weight_mask_thre=1e-4\r\n",
      "Traceback (most recent call last):\r\n",
      "  File \"/kaggle/working/gaussian-splatting/train.py\", line 16, in <module>\r\n",
      "    from gaussian_renderer import render, network_gui\r\n",
      "  File \"/kaggle/working/gaussian-splatting/gaussian_renderer/__init__.py\", line 14, in <module>\r\n",
      "    from diff_gaussian_rasterization import GaussianRasterizationSettings, GaussianRasterizer\r\n",
      "ModuleNotFoundError: No module named 'diff_gaussian_rasterization'\r\n"
     ]
    }
   ],
   "source": [
    "# 2. 训练模型\n",
    "train_models(data_dir)"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 7691117,
     "sourceId": 12209798,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31040,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.11"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 103.096977,
   "end_time": "2025-06-18T19:47:19.573837",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-06-18T19:45:36.476860",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
