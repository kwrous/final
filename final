{"metadata":{"kernelspec":{"name":"python3","display_name":"Python 3","language":"python"},"language_info":{"name":"python","version":"3.11.11","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":12209798,"sourceType":"datasetVersion","datasetId":7691117}],"dockerImageVersionId":31040,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"\n本实验包含三种方法的实现和对比：\n1. 原版 NeRF\n2. NeRF 加速技术（TensoRF）\n3. 3D Gaussian Splatting\n\n## 目录\n1. [环境配置](#环境配置)\n2. [数据准备](#数据准备)\n3. [模型实现](#模型实现)\n4. [训练与评估](#训练与评估)\n5. [结果分析](#结果分析)","metadata":{"_uuid":"b43992de-0759-4d21-ae6f-0480b0517aff","_cell_guid":"6ceb62f5-bf89-4f5f-bea5-c621c3882fe7","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false}}},{"cell_type":"markdown","source":"\n首先配置必要的环境和依赖。","metadata":{"_uuid":"fd269f00-2b73-45a6-976b-c819683c510c","_cell_guid":"66ff20e9-0b00-4fc1-a7d4-4baa849c4fdb","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false}}},{"cell_type":"code","source":"import os\nimport shutil\n\ninput_path = \"/kaggle/input\"","metadata":{"_uuid":"67a4fb98-018d-4974-b2e0-39ce5ef26e7b","_cell_guid":"72b3e1f5-1958-4c8d-b857-c6f3c07ec202","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-06-18T19:36:07.527053Z","iopub.execute_input":"2025-06-18T19:36:07.527832Z","iopub.status.idle":"2025-06-18T19:36:07.531345Z","shell.execute_reply.started":"2025-06-18T19:36:07.527786Z","shell.execute_reply":"2025-06-18T19:36:07.530545Z"},"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import os\nimport shutil\n\ninput_path = \"/kaggle/input/my-object\"\noutput_path = \"/kaggle/working/output\"\n\n# 删除现有的输出目录\nif os.path.exists(output_path):\n    shutil.rmtree(output_path)\n\n# 复制目录\nshutil.copytree(input_path, output_path)","metadata":{"_uuid":"5d4b2731-b303-43ef-8379-8c12213ea0db","_cell_guid":"c9628a13-9c73-4a71-9bc9-b41838e20c30","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-06-18T19:36:07.661301Z","iopub.execute_input":"2025-06-18T19:36:07.661589Z","iopub.status.idle":"2025-06-18T19:36:08.376949Z","shell.execute_reply.started":"2025-06-18T19:36:07.661567Z","shell.execute_reply":"2025-06-18T19:36:08.376291Z"},"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# 检查CUDA可用性\nimport torch\nprint(f\"CUDA is available: {torch.cuda.is_available()}\")\nprint(f\"CUDA device count: {torch.cuda.device_count()}\")\nif torch.cuda.is_available():\n    print(f\"Current CUDA device: {torch.cuda.get_device_name(0)}\")","metadata":{"_uuid":"3c692cb3-9b20-4d02-be6f-3d7bec2ab23a","_cell_guid":"a632f25f-7a6e-4abb-aacc-35b3ef8fc02e","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-06-18T19:36:08.378255Z","iopub.execute_input":"2025-06-18T19:36:08.378462Z","iopub.status.idle":"2025-06-18T19:36:08.383272Z","shell.execute_reply.started":"2025-06-18T19:36:08.378446Z","shell.execute_reply":"2025-06-18T19:36:08.382523Z"},"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# 安装依赖包\n!pip install opencv-python imageio scikit-image tqdm matplotlib tensorboard\n\n# 克隆代码仓库\n!git clone https://github.com/apchenstu/TensoRF.git\n!git clone https://github.com/graphdeco-inria/gaussian-splatting.git\n!git clone https://github.com/bmild/nerf.git","metadata":{"_uuid":"04ddd11a-372b-4740-b2bf-38d80dfebc4f","_cell_guid":"b7b5bee9-276d-4bc5-9720-1c574446d90e","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-06-18T19:36:08.384001Z","iopub.execute_input":"2025-06-18T19:36:08.384258Z","iopub.status.idle":"2025-06-18T19:36:11.951957Z","shell.execute_reply.started":"2025-06-18T19:36:08.384234Z","shell.execute_reply":"2025-06-18T19:36:11.951187Z"},"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"\n### 数据集结构\n```\nmy_object/\n    images/           # 拍摄的多角度图片\n    sparse/0/         # COLMAP输出\n        cameras.bin\n        images.bin\n        points3D.bin\n```","metadata":{"_uuid":"54e7bd57-19f6-4d99-937e-6fff791066bf","_cell_guid":"bbbc5f6f-aa96-448b-94d6-91fd6f58d918","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false}}},{"cell_type":"code","source":"def create_transforms_json(data_dir: str):\n    \"\"\"\n    针对 my_object/ 结构，为训练集和测试集分别创建 transforms_train.json、transforms_test.json 文件，兼容TensoRF。\n    自动修正frames中file_path字段为相对images/的路径，避免路径拼接错误。\n    \"\"\"\n    import json\n    from pathlib import Path\n    data_path = Path(data_dir)\n    transforms_file = data_path / 'transforms.json'\n    if not transforms_file.exists():\n        raise FileNotFoundError(f\"找不到 {transforms_file}，请先运行 colmap2nerf.py 生成。\")\n    with open(transforms_file, 'r') as f:\n        transforms_data = json.load(f)\n    train_dir = data_path / 'train'\n    test_dir = data_path / 'test'\n    def get_stems(p):\n        return set(f.stem for f in p.glob('*') if f.is_file())\n    train_stems = get_stems(train_dir)\n    test_stems = get_stems(test_dir)\n    def filter_frames(stems):\n        # 修正file_path为 images/xxx.jpg 或 images/xxx.png\n        filtered = []\n        for frame in transforms_data['frames']:\n            stem = Path(frame['file_path']).stem\n            if stem in stems:\n                # 只保留 images/xxx.扩展名\n                ext = Path(frame['file_path']).suffix\n                frame['file_path'] = f\"images/{stem}{ext}\"\n                filtered.append(frame)\n        return filtered\n    train_frames = filter_frames(train_stems)\n    test_frames = filter_frames(test_stems)\n    # 写入TensoRF兼容的transforms_train.json、transforms_test.json\n    train_transforms = dict(transforms_data)\n    train_transforms['frames'] = train_frames\n    with open(data_path / 'transforms_train.json', 'w') as f:\n        json.dump(train_transforms, f, indent=2)\n    test_transforms = dict(transforms_data)\n    test_transforms['frames'] = test_frames\n    with open(data_path / 'transforms_test.json', 'w') as f:\n        json.dump(test_transforms, f, indent=2)\n    # 仍保留原有train/test目录下的transforms.json\n    with open(train_dir / 'transforms.json', 'w') as f:\n        json.dump(train_transforms, f, indent=2)\n    with open(test_dir / 'transforms.json', 'w') as f:\n        json.dump(test_transforms, f, indent=2)\n    print(f\"已为训练集({len(train_frames)})和测试集({len(test_frames)})生成 transforms_train.json / transforms_test.json 及各自目录下的transforms.json，图片路径已修正为 images/xxx.扩展名\")","metadata":{"_uuid":"e772eb72-baec-4c98-ab3a-81328f0de9af","_cell_guid":"e0adbcb8-1480-48b3-96b7-629c2dbdc59f","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-06-18T19:36:11.952943Z","iopub.execute_input":"2025-06-18T19:36:11.953194Z","iopub.status.idle":"2025-06-18T19:36:11.962444Z","shell.execute_reply.started":"2025-06-18T19:36:11.953157Z","shell.execute_reply":"2025-06-18T19:36:11.961838Z"},"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import os\nimport json\nimport numpy as np\nimport random\nimport shutil\nfrom pathlib import Path\nfrom PIL import Image\n\ndef split_dataset(data_dir: str, train_ratio: float = 0.8, seed: int = 42):\n    \"\"\"数据集划分为训练集和测试集\"\"\"\n    random.seed(seed)\n    np.random.seed(seed)\n    \n    data_path = Path(data_dir)\n    images_path = data_path / 'images'\n    train_dir = data_path / 'train'\n    test_dir = data_path / 'test'\n    train_dir.mkdir(exist_ok=True)\n    test_dir.mkdir(exist_ok=True)\n    \n    # 修复图片glob写法，分别匹配三种扩展名\n    image_files = []\n    for ext in ['jpg', 'jpeg', 'png']:\n        image_files.extend(images_path.glob(f'*.{ext}'))\n    n_images = len(image_files)\n    n_train = int(n_images * train_ratio)\n    \n    random.shuffle(image_files)\n    train_files = image_files[:n_train]\n    test_files = image_files[n_train:]\n    \n    for f in train_files:\n        shutil.copy2(f, train_dir / f.name)\n    for f in test_files:\n        shutil.copy2(f, test_dir / f.name)\n    \n    print(f\"数据集划分完成：\")\n    print(f\"- 训练集：{len(train_files)}张图片\")\n    print(f\"- 测试集：{len(test_files)}张图片\")\n    \n    return train_dir, test_dir\n\ndef prepare_dataset(data_dir: str):\n    \"\"\"完整的数据准备流程\"\"\"\n    # 1. 运行COLMAP数据处理（修正参数为--images --text --out）\n    images_dir = os.path.join(data_dir, 'images')\n    colmap_text_dir = os.path.join(data_dir, 'colmap_text')\n    transforms_out = os.path.join(data_dir, 'transforms.json')\n    !python TensoRF/dataLoader/colmap2nerf.py --images {images_dir} --text {colmap_text_dir} --out {transforms_out}\n    \n    # 2. 划分数据集\n    train_dir, test_dir = split_dataset(data_dir)\n    \n    # 3. 创建transforms文件\n    create_transforms_json(data_dir)\n    \n    print(\"数据准备完成！\")","metadata":{"_uuid":"d51977eb-9673-4907-930d-8dd4b75e09a8","_cell_guid":"1b06ab10-d32b-4eab-9da7-dea5dff0d844","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-06-18T19:36:11.964879Z","iopub.execute_input":"2025-06-18T19:36:11.965131Z","iopub.status.idle":"2025-06-18T19:36:11.985454Z","shell.execute_reply.started":"2025-06-18T19:36:11.965114Z","shell.execute_reply":"2025-06-18T19:36:11.984698Z"},"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"def visualize_camera_positions(transforms_json: str):\n    \"\"\"可视化相机位置分布\"\"\"\n    import matplotlib.pyplot as plt\n    from mpl_toolkits.mplot3d import Axes3D\n    \n    with open(transforms_json, 'r') as f:\n        data = json.load(f)\n    \n    positions = []\n    for frame in data['frames']:\n        transform = np.array(frame['transform_matrix'])\n        position = transform[:3, 3]\n        positions.append(position)\n    \n    positions = np.array(positions)\n    \n    fig = plt.figure(figsize=(10, 10))\n    ax = fig.add_subplot(111, projection='3d')\n    ax.scatter(positions[:, 0], positions[:, 1], positions[:, 2])\n    ax.set_xlabel('X')\n    ax.set_ylabel('Y')\n    ax.set_zlabel('Z')\n    ax.set_title('Camera Positions')\n    plt.show()","metadata":{"_uuid":"bade8857-c502-46b2-9875-53e57d7c4725","_cell_guid":"bdb654de-1435-4d04-bebb-c5641155c56b","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-06-18T19:36:11.986272Z","iopub.execute_input":"2025-06-18T19:36:11.986535Z","iopub.status.idle":"2025-06-18T19:36:12.003724Z","shell.execute_reply.started":"2025-06-18T19:36:11.986518Z","shell.execute_reply":"2025-06-18T19:36:12.002993Z"},"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"\n包含三种模型的训练和渲染实现。","metadata":{"_uuid":"4acd3f63-3e5f-432f-a3d4-46009e58b436","_cell_guid":"0d32a8e9-2bea-488d-80d0-f88f6dd417b8","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false}}},{"cell_type":"code","source":"# TensoRF配置\ndef create_tensorf_config(data_dir, exp_name):\n    \"\"\"创建TensoRF训练配置，并将配置文件写入TensoRF目录下\"\"\"\n    config = {\n        'dataset_name': 'own_data',\n        'datadir': data_dir,\n        'expname': exp_name,\n        'basedir': './log',\n        'n_iters': 30000,\n        'batch_size': 4096,\n        'N_voxel_init': 2097156,  # 128**3\n        'N_voxel_final': 27000000,  # 300**3\n        'upsamp_list': [2000, 3000, 4000, 5500, 7000],\n        'update_AlphaMask_list': [2000, 4000],\n        'model_name': 'TensorVMSplit',\n        'n_lamb_sigma': [16, 16, 16],\n        'n_lamb_sh': [48, 48, 48]\n    }\n    config_path = os.path.join('TensoRF', 'tensorf_config.txt')\n    with open(config_path, 'w') as f:\n        for key, value in config.items():\n            f.write(f\"{key} = {value}\\n\")\n    return config_path\n\ndef train_models(data_dir: str):\n    \"\"\"训练三个模型\"\"\"\n    # 1. TensoRF\n    config_path = create_tensorf_config(data_dir, 'experiment_1')\n    !cd TensoRF && python train.py --config tensorf_config.txt\n    \n    # 2. Original NeRF（只传递NeRF需要的参数）\n    !cd nerf && python run_nerf.py --config configs/default.txt --datadir {data_dir}\n    \n    # 3. 3D Gaussian Splatting\n    !cd gaussian-splatting && python train.py -s {data_dir}","metadata":{"_uuid":"7f66143a-f835-4535-b470-ca06d13a4cc9","_cell_guid":"c95efc01-edf5-479c-84e5-213c03a5ab8a","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-06-18T19:36:12.004504Z","iopub.execute_input":"2025-06-18T19:36:12.004732Z","iopub.status.idle":"2025-06-18T19:36:12.022386Z","shell.execute_reply.started":"2025-06-18T19:36:12.004715Z","shell.execute_reply":"2025-06-18T19:36:12.021681Z"},"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"\n使用Tensorboard监控训练过程，包括：\n- 训练集和测试集上的loss曲线\n- PSNR指标变化\n- SSIM指标变化","metadata":{"_uuid":"56450cd4-7379-4d2b-ac1f-c7439d0ef18e","_cell_guid":"35f3970f-0f3a-40f3-a75c-2bb92fe1b2ed","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false}}},{"cell_type":"code","source":"from torch.utils.tensorboard import SummaryWriter\nimport datetime\n\ndef setup_tensorboard(experiment_name):\n    \"\"\"设置Tensorboard\"\"\"\n    current_time = datetime.datetime.now().strftime('%Y%m%d-%H%M%S')\n    log_dir = f'runs/{experiment_name}_{current_time}'\n    return SummaryWriter(log_dir)\n\ndef log_metrics(writer, metrics, step):\n    \"\"\"记录训练指标\"\"\"\n    for key, value in metrics.items():\n        writer.add_scalar(key, value, step)","metadata":{"_uuid":"47b7fc43-600b-45b3-9442-0c8a716ee56c","_cell_guid":"d541ef22-a9e5-4d57-b671-e968b2e102a4","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-06-18T19:36:12.023177Z","iopub.execute_input":"2025-06-18T19:36:12.023370Z","iopub.status.idle":"2025-06-18T19:36:12.039344Z","shell.execute_reply.started":"2025-06-18T19:36:12.023348Z","shell.execute_reply":"2025-06-18T19:36:12.038768Z"},"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# 创建环绕相机轨迹\ndef create_circular_trajectory(n_frames=120, radius=4.0, height=0.0):\n    \"\"\"创建环绕物体的圆形相机轨迹\"\"\"\n    trajectory = []\n    for i in range(n_frames):\n        angle = (i / n_frames) * 2 * np.pi\n        x = radius * np.cos(angle)\n        z = radius * np.sin(angle)\n        y = height\n        \n        look_at = np.array([0, 0, 0])\n        pos = np.array([x, y, z])\n        up = np.array([0, 1, 0])\n        \n        forward = look_at - pos\n        forward = forward / np.linalg.norm(forward)\n        right = np.cross(forward, up)\n        right = right / np.linalg.norm(right)\n        up = np.cross(right, forward)\n        \n        c2w = np.eye(4)\n        c2w[:3, :3] = np.stack([right, up, -forward], axis=1)\n        c2w[:3, 3] = pos\n        \n        trajectory.append(c2w.tolist())\n    \n    return trajectory","metadata":{"_uuid":"aceeb7ea-4f65-438a-afa9-09438c7b4b8c","_cell_guid":"c338c8fa-9ccb-4852-b8ae-6f1aea5ecdc1","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-06-18T19:36:12.039994Z","iopub.execute_input":"2025-06-18T19:36:12.040172Z","iopub.status.idle":"2025-06-18T19:36:12.054031Z","shell.execute_reply.started":"2025-06-18T19:36:12.040159Z","shell.execute_reply":"2025-06-18T19:36:12.053359Z"},"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"from dataclasses import dataclass\n\n@dataclass\nclass ModelPerformance:\n    \"\"\"记录模型性能指标\"\"\"\n    name: str\n    training_time: float\n    inference_time: float\n    psnr: float\n    ssim: float\n    memory_usage: float\n    parameters: int\n\ndef evaluate_models(data_dir: str):\n    \"\"\"评估三个模型的性能\"\"\"\n    # 创建环绕轨迹\n    trajectory = create_circular_trajectory()\n    \n    # 评估每个模型\n    models = ['nerf', 'tensorf', 'gaussian']\n    results = {}\n    \n    for model in models:\n        if model == 'tensorf':\n            metrics = evaluate_on_test_set('tensorf', 'tensorf_config.txt', 'TensoRF/logs/model.pth')\n        elif model == 'nerf':\n            metrics = evaluate_on_test_set('nerf', 'nerf/configs/default.txt', 'nerf/logs/model.pth')\n        else:\n            metrics = evaluate_on_test_set('gaussian', ckpt_path='gaussian_model.ply')\n        \n        results[model] = metrics\n    \n    return results","metadata":{"_uuid":"a694b2e6-d187-433b-a5a3-50762bd66202","_cell_guid":"67927cdb-c27a-481c-b8b8-bfc8d2471b03","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-06-18T19:36:12.054846Z","iopub.execute_input":"2025-06-18T19:36:12.055057Z","iopub.status.idle":"2025-06-18T19:36:12.073999Z","shell.execute_reply.started":"2025-06-18T19:36:12.055036Z","shell.execute_reply":"2025-06-18T19:36:12.073383Z"},"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"\n比较三种方法的:\n1. 训练时间和效率\n2. 渲染质量（PSNR/SSIM）\n3. 资源消耗","metadata":{"_uuid":"081e5240-0210-4894-b91c-701a7ff0bd02","_cell_guid":"11c79541-77bb-4ac5-9494-92be4045677e","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false}}},{"cell_type":"code","source":"def visualize_results(results):\n    \"\"\"可视化对比结果\"\"\"\n    import matplotlib.pyplot as plt\n    \n    metrics = ['psnr', 'ssim', 'training_time', 'inference_time']\n    fig, axes = plt.subplots(2, 2, figsize=(15, 10))\n    fig.suptitle('Model Performance Comparison')\n    \n    for (metric, ax) in zip(metrics, axes.flat):\n        values = [results[model][metric] for model in results]\n        ax.bar(['NeRF', 'TensoRF', 'Gaussian'], values)\n        ax.set_title(metric.upper())\n    \n    plt.tight_layout()\n    plt.show()","metadata":{"_uuid":"fe414833-609b-4618-840a-3567b6f0484a","_cell_guid":"1b90f824-5930-429a-a688-5febf590e4dd","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-06-18T19:36:12.074603Z","iopub.execute_input":"2025-06-18T19:36:12.074832Z","iopub.status.idle":"2025-06-18T19:36:12.087295Z","shell.execute_reply.started":"2025-06-18T19:36:12.074797Z","shell.execute_reply":"2025-06-18T19:36:12.086676Z"},"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"\n```python\n# 1. 准备数据\ndata_dir = 'data/my_object'\nprepare_dataset(data_dir)\n\n# 2. 训练模型\ntrain_models(data_dir)\n\n# 3. 评估结果\nresults = evaluate_models(data_dir)\nvisualize_results(results)\n```","metadata":{"_uuid":"1d308e7f-db4e-4755-868b-b15664bb8b4d","_cell_guid":"145f749c-f846-49f2-90ce-c0167560a76c","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false}}},{"cell_type":"code","source":"# 复制TensoRF的配置模板为NeRF默认配置，解决缺省配置文件报错\nimport shutil, os\nnerf_config_dir = os.path.join('nerf', 'configs')\nos.makedirs(nerf_config_dir, exist_ok=True)\nshutil.copy(os.path.join('TensoRF', 'configs', 'your_own_data.txt'), os.path.join(nerf_config_dir, 'default.txt'))\nprint('已复制TensoRF/configs/your_own_data.txt 到 nerf/configs/default.txt')","metadata":{"_uuid":"a5deb4e5-298f-441c-bca4-7127a0835163","_cell_guid":"e5572d19-cc81-4b16-85b1-8ae6a21a582d","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-06-18T19:36:12.087993Z","iopub.execute_input":"2025-06-18T19:36:12.088211Z","iopub.status.idle":"2025-06-18T19:36:12.104591Z","shell.execute_reply.started":"2025-06-18T19:36:12.088189Z","shell.execute_reply":"2025-06-18T19:36:12.103943Z"},"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# 1. 准备数据\ndata_dir = '/kaggle/working/output/my_object'\nprepare_dataset(data_dir)","metadata":{"_uuid":"16fc379a-3ab6-4b51-865a-0f3bb5873c14","_cell_guid":"541e58b3-486b-4265-8c8e-982d16ea5e57","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-06-18T19:36:12.105342Z","iopub.execute_input":"2025-06-18T19:36:12.105531Z","iopub.status.idle":"2025-06-18T19:36:24.153198Z","shell.execute_reply.started":"2025-06-18T19:36:12.105517Z","shell.execute_reply":"2025-06-18T19:36:24.152416Z"},"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# 安装TensoRF/NeRF依赖\n!pip install configargparse plyfile\n\n# 编译并安装Gaussian Splatting的diff-gaussian-rasterization子模块\nimport os\nos.chdir('gaussian-splatting/submodules/diff-gaussian-rasterization')\nif os.path.exists('setup.py') or os.path.exists('pyproject.toml'):\n    # 使用pip安装当前目录\n    !pip install .\nelse:\n    print(\"未找到setup.py或pyproject.toml，请检查子模块是否完整。\")\nos.chdir('../simple-knn')\nif os.path.exists('setup.py') or os.path.exists('pyproject.toml'):\n    # 使用pip安装当前目录\n    !pip install .\nelse:\n    print(\"未找到setup.py或pyproject.toml，请检查simple-knn子模块是否完整。\")\nos.chdir('../../../')","metadata":{"_uuid":"bb3b0515-976f-4ecd-afb6-ab7352e40e41","_cell_guid":"22cca51b-acd6-4d69-8a07-f7a26eeb62f2","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-06-18T19:36:24.155961Z","iopub.execute_input":"2025-06-18T19:36:24.156172Z","iopub.status.idle":"2025-06-18T19:36:48.778725Z","shell.execute_reply.started":"2025-06-18T19:36:24.156151Z","shell.execute_reply":"2025-06-18T19:36:48.777734Z"},"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import os\nimport json\nfrom glob import glob\n\ndef fix_transforms_json_image_paths(transforms_path, images_dir):\n    with open(transforms_path, 'r', encoding='utf-8') as f:\n        data = json.load(f)\n    changed = False\n    for frame in data.get('frames', []):\n        file_path = frame['file_path']\n        # 只保留文件名部分\n        filename = os.path.basename(file_path)\n        # 去除多余扩展名（如16.jpg.png）\n        base, ext = os.path.splitext(filename)\n        # 检查实际存在的文件\n        candidates = glob(os.path.join(images_dir, base + '.*'))\n        if candidates:\n            # 取第一个实际存在的文件\n            real_file = os.path.basename(candidates[0])\n            new_path = f'images/{real_file}'\n            if frame['file_path'] != new_path:\n                print(f\"修正: {frame['file_path']} -> {new_path}\")\n                frame['file_path'] = new_path\n                changed = True\n        else:\n            print(f\"警告: 未找到图片 {filename} 在 {images_dir}\")\n    if changed:\n        with open(transforms_path, 'w', encoding='utf-8') as f:\n            json.dump(data, f, indent=2)\n        print(f\"已修正 {transforms_path} 中的图片路径。\")\n    else:\n        print(f\"{transforms_path} 无需修正。\")\n\n# 用法示例\nfix_transforms_json_image_paths('/kaggle/working/output/my_object/transforms_train.json', '/kaggle/working/output/my_object/images')\nfix_transforms_json_image_paths('/kaggle/working/output/my_object/transforms_test.json', '/kaggle/working/output/my_object/images')","metadata":{"_uuid":"ab802d49-5098-43f2-a51a-87dbe24c897d","_cell_guid":"9acce4f3-0624-4ab5-8414-f42a6a11fca4","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-06-18T19:36:48.779993Z","iopub.execute_input":"2025-06-18T19:36:48.780280Z","iopub.status.idle":"2025-06-18T19:36:48.792968Z","shell.execute_reply.started":"2025-06-18T19:36:48.780254Z","shell.execute_reply":"2025-06-18T19:36:48.792314Z"},"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# 2. 训练模型\ntrain_models(data_dir)","metadata":{"_uuid":"d186dfe2-02bc-4b0b-8c36-2f841ebe84b3","_cell_guid":"654ab0e1-f203-4087-a491-609f941eeb33","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-06-18T19:36:48.793716Z","iopub.execute_input":"2025-06-18T19:36:48.794068Z","iopub.status.idle":"2025-06-18T19:37:12.957529Z","shell.execute_reply.started":"2025-06-18T19:36:48.794044Z","shell.execute_reply":"2025-06-18T19:37:12.956555Z"},"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null}]}